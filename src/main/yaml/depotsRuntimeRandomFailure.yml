incarnation: collektive
variables:
  speed: &speed
    formula: 0.5 # 1 m/s
  obstaclesRepulsion: &obstaclesRepulsion
    formula: 0.5
  isDone: &isDone
    formula: 0.0
  seed: &seed
    min: 0
    max:
      formula: System.getenv("MAX_SEED").toDouble()
      language: kotlin
    step: 1
    default: 0
  communication: &communication
    type: ArbitraryVariable
    # bluetooth (50, 100, 150) -> 500 full range
    parameters: [ 20, [ 20, 50, 100, 500 ] ]
  leaderBased: &leaderBased
    formula: System.getenv("LEADER_BASED").toBoolean()
    language: kotlin
  fileName: &fileName
    formula: >
      "runtime-random-failure_leaderBased-${leaderBased}"
    language: kotlin
  totalNodes: &totalNodes
    type: ArbitraryVariable
    parameters: [ 40, [ 5, 10, 20, 40 ] ]
  totalTaskFactor: &totalTaskFactor
    type: ArbitraryVariable
    parameters: [ 4, [ 0.5, 1, 2, 4 ] ]
  failureTimeAverage: &failureTimeAverage
    type: ArbitraryVariable
    parameters: [ 1000.0, [ 1000.0, 2000.0, 5000.0, 10000.0, 50000.0 ] ]

  totalTasks: &totalTasks
    formula: totalNodes * totalTaskFactor
    language: kotlin

launcher:
  parameters:
    batch: [seed, communication, totalNodes, totalTaskFactor, failureTimeAverage] #leaderBased
    showProgress: true
    autoStart: true
# TIME UNITS = seconds
environment:
  type: Continuous2DObstacles

# bluetooth range => 100,
network-model:
  type: MoleculeBreaksConnection
  parameters: [ *communication, task ]

seeds:
  scenario: *seed
  simulation: *seed

_pool: &program
  - time-distribution: 0.50 # one computation every 2 seconds
    type: Event
    actions:
      - type: RunCollektiveProgram
        parameters: [it.unibo.collektive.program.ReplanningKt.replanning]

deployments:
  tasks:
    # 200 x 200
    type: Rectangle
    parameters: [ *totalTasks, -90, -90, 190, 190 ]
    contents:
      - molecule: task
        concentration: true
      - molecule: isDone
        concentration: *isDone
    programs:
      - time-distribution: 1
        type: Event
        actions:
          - type: LookupTasksToExecute
  destination_depot:
    type: SpecificPositions
    parameters: [ [100, 100] ]
    contents:
      - molecule: task
        concentration: false
      - molecule: destination
        concentration: true
  source_depot:
    type: SpecificPositions
    parameters: [ [-100, -100] ]
    contents:
      - molecule: task
        concentration: false
      - molecule: source
        concentration: true
  agents:
    type: Rectangle
    parameters: [*totalNodes, -95, -95, 5, 5]
    nodes: 30 # 2 seconds to react to failure
    programs:
      - time-distribution: 1 # each second
        type: Event
        actions:
          - type: EuclideanConfigurableMoveNode
            parameters:
              routing-strategy:
                type: ObstacleAvoidance
              target-selection-strategy:
                type: FollowTarget
                parameters: target
              speed: *speed
      - *program
    contents:
      - molecule: destination
        concentration: [100, 100]
      - molecule: agent
        concentration: true
      - molecule: selected
        concentration: -1
      - molecule: down
        concentration: false
      - molecule: leaderBased
        concentration: *leaderBased
      - molecule: deathRate
        concentration: *failureTimeAverage
    properties:
      - type: it.unibo.alchemist.model.sensors.LocationSensorProperty
      - type: it.unibo.alchemist.model.sensors.DepotsSensorProperty

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: *fileName
      interval: 1.0
      exportPath: data/runtime-random-failure
    data:
      - time
      - molecule: isDone
        aggregators: [sum]
        value-filter: "onlyFinite"
      - molecule: replanning
        aggregators: [sum]
        value-filter: "onlyFinite"
      - molecule: totalReplanning
        aggregators: [sum, mean]
        value-filter: "onlyFinite"
      - molecule: distance
        aggregators: [sum, mean]
        value-filter: "onlyFinite"
      - molecule: neighbors
        aggregators: [mean]
        value-filter: "onlyFinite"
      - molecule: neighbors
        aggregators: [ mean ]
        value-filter: "onlyFinite"
      - molecule: taskSize
        aggregators: [ sum ]
        value-filter: "onlyFinite"
      - molecule: dones
        aggregators: [ sum, mean ]
        value-filter: "onlyFinite"
      - type: DonesExtractor
        parameters: [ ]

terminate:
  - type: DoneIsStableForTime
    parameters: [ 60.0, 10.0 ] # 10 minutes
