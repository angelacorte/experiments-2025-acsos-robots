incarnation: collektive

environment:
  type: Continuous2DObstacles
  global-programs:
    - time-distribution:
        type: DiracComb
        parameters: [ 0, 1 ]
      type: AllocationBasedOnFormalization
      parameters: [ ]
    - time-distribution:
        type: Trigger
        parameters: [ 200 ] # fire at 400 seconds
      type: RandomFail
      parameters: [ 1 ]
    - time-distribution:
        type: Trigger
        parameters: [ 400 ] # fire at 400 seconds
      type: RandomFail
      parameters: [ 1 ]
    - time-distribution:
        type: Trigger
        parameters: [ 600 ] # fire at 600 seconds
      type: RandomFail
      parameters: [ 1 ]


network-model:
  type: ObstaclesBreakConnection
  parameters: [0.01]

variables:
  speed: &speed
    formula: 0.5 # 1 m/s
  obstaclesRepulsion: &obstaclesRepulsion
    formula: 0.5
  isDone: &isDone
    formula: 0.0
  seed: &seed
    min: 0
    max:
      formula: System.getenv("MAX_SEED").toDouble()
      language: kotlin
    step: 1
    default: 0
  totalNodes: &totalNodes
    type: ArbitraryVariable
    parameters: [ 40, [ 5, 10, 20, 40 ] ]
  totalTaskFactor: &totalTaskFactor
    type: ArbitraryVariable
    parameters: [ 2, [ 0.5, 1, 2, 4 ] ]
  totalTasks: &totalTasks
    formula: totalNodes * totalTaskFactor
    language: kotlin

launcher:
  parameters:
    batch: [seed, totalNodes, totalTaskFactor]
    showProgress: true
    autoStart: true

seeds:
  scenario: *seed
  simulation: *seed

_pool: &program
  - time-distribution: 1
    type: Event
    actions:
      - type: RunCollektiveProgram
        parameters: [it.unibo.collektive.program.FollowerKt.followTasks]

deployments:
  tasks:
    # 200 x 200
    type: Rectangle
    parameters: [ *totalTasks, -90, -90, 190, 190 ]
    contents:
      - molecule: task
        concentration: true
      - molecule: isDone
        concentration: *isDone
    programs:
      - time-distribution: 1
        type: Event
        actions:
          - type: LookupTasksToExecute
  destination_depot:
    type: SpecificPositions
    parameters: [ [100, 100] ]
    contents:
      - molecule: task
        concentration: false
      - molecule: destination
        concentration: true
  source_depot:
    type: SpecificPositions
    parameters: [ [-100, -100] ]
    contents:
      - molecule: task
        concentration: false
      - molecule: source
        concentration: true
  agents:
    type: Rectangle
    parameters: [ *totalNodes, -95, -95, 5, 5 ]
    nodes: 30 # 30 seconds to react to failure
    programs:
      - time-distribution: 1 # each second
        type: Event
        actions:
          - type: EuclideanConfigurableMoveNode
            parameters:
              routing-strategy:
                type: ObstacleAvoidance
              target-selection-strategy:
                type: FollowTarget
                parameters: target
              speed: *speed
      - *program
    contents:
      - molecule: destination
        concentration: [ 100, 100 ]
      - molecule: agent
        concentration: true
      - molecule: selected
        concentration: -1
      - molecule: down
        concentration: false

    properties:
      - type: it.unibo.alchemist.model.sensors.LocationSensorProperty
      - type: it.unibo.alchemist.model.sensors.DepotsSensorProperty


export:
  - type: CSVExporter
    parameters:
      fileNameRoot: oracle
      interval: 1.0
      exportPath: data/oracle
    data:
      - time
      - molecule: isDone
        aggregators: [sum]
        value-filter: "onlyFinite"
      - molecule: distance
        aggregators: [sum, mean]
        value-filter: "onlyFinite"
      - molecule: dones # task completed by nodes
        aggregators: [ mean ]
        value-filter: "onlyFinite"
      - type: DonesExtractor
        parameters: [ ]
      - molecule: lastMovingTime
        aggregators: [ max ]

terminate:
  - type: DoneIsStableForTime
    parameters: [ 60.0, 60.0 ] # one hour
